package administrador;

import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 *
 * @author carolina
 */
public class Administrador extends javax.swing.JFrame {

    DefaultListModel dlm;
    DefaultListModel dlm2;
    /*
     * ------------------------Constructor de la
     * ventana----------------------------
     */

    public Administrador() {
        initComponents();
        dlm = new DefaultListModel();
        dlm2 = new DefaultListModel();
        ListaURL.setModel(dlm);
        ListaPalabra.setModel(dlm2);
    }
    /*
     * metodo de preparacion antes de empezar a trabajar. Se conecta con el
     * proxy y le pide las listas y las banderas de get y post
     */

    public void conectarse() throws IOException {
        clienteAdm = new ClienteTCP("localhost", 6666);
        clienteAdm.conect();
        /*pido la lista de URLs*/
        Object comando = ((Object) ("listDUW"));
        clienteAdm.mandar(comando);
        try {
            ArrayList lista = (ArrayList) (clienteAdm.recibir());
            /*si la lista que llega no est√° vacia agrega los elementos de uno en uno 
             * a nuestra propia lista*/
            if (lista.isEmpty()) {
            } else {
                int i;
                for (i = 0; i < lista.size(); i++) {
                    dlm.addElement(lista.get(i));
                }
            }
        } catch (ClassNotFoundException ex) {
            aviso = new Mensaje("el servidor no se encuentra disponible en este"
                    + " momento, por favor reintente luego");
            aviso.mostrar();
        }
        /*pido la lista de palabras prohibidas*/
        comando = ((Object) "listDW");
        clienteAdm.mandar(comando);
        try {
            ArrayList lista = (ArrayList) (clienteAdm.recibir());
            if (lista.isEmpty()) {
            } else {
                int i;
                for (i = 0; i < lista.size(); i++) {
                    dlm2.addElement(lista.get(i));
                }
            }
        } catch (ClassNotFoundException ex) {
            aviso = new Mensaje(ex.getMessage());
        }
        /*pido el estado del get y lo actualizo en mis banderas*/
        clienteAdm.mandar((Object) "GET");
        try {
            String recibido = (String) clienteAdm.recibir();
            if ("deny".equals(recibido)) {
                SiGet.setSelected(true);

            } else {
                SiGet.setSelected(false);
            }
        } catch (ClassNotFoundException ex) {
            aviso = new Mensaje(ex.getMessage());
            aviso.mostrar();
        }
        /*pido el estado del post y lo actualizo*/
        clienteAdm.mandar((Object) "POST");
        try {
            String recibido = (String) clienteAdm.recibir();
            if ("deny".equals(recibido)) {
                SiPost.setSelected(true);

            } else {
            }
        } catch (ClassNotFoundException ex) {
            aviso = new Mensaje(ex.getMessage());
            aviso.mostrar();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        agregarURL = new javax.swing.JButton();
        borrarURL = new javax.swing.JButton();
        borrarPalabra = new javax.swing.JButton();
        agregarPalabra = new javax.swing.JButton();
        Get = new javax.swing.JLabel();
        Post = new javax.swing.JLabel();
        SiGet = new javax.swing.JRadioButton();
        SiPost = new javax.swing.JRadioButton();
        EspacioURL = new javax.swing.JTextField();
        EspacioPalabra = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaURL = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListaPalabra = new javax.swing.JList();
        PalabraProhibida = new javax.swing.JLabel();
        URLProhibida = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                cerrar(evt);
            }
        });

        agregarURL.setText("Agregar");
        agregarURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarURLActionPerformed(evt);
            }
        });

        borrarURL.setText("Borrar");
        borrarURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarURLActionPerformed(evt);
            }
        });

        borrarPalabra.setText("Borrar");
        borrarPalabra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarPalabraActionPerformed(evt);
            }
        });

        agregarPalabra.setText("Agregar");
        agregarPalabra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPalabraActionPerformed(evt);
            }
        });

        Get.setText("Desactivar Get");

        Post.setText("Desactivar Post");

        SiGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiGetActionPerformed(evt);
            }
        });

        SiPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiPostActionPerformed(evt);
            }
        });

        EspacioURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EspacioURLActionPerformed(evt);
            }
        });

        EspacioPalabra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EspacioPalabraActionPerformed(evt);
            }
        });

        ListaURL.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ListaURL);

        ListaPalabra.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(ListaPalabra);

        PalabraProhibida.setText("Palabra Prohibida");

        URLProhibida.setText("Palabra URL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(URLProhibida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(EspacioURL, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Get)
                        .addGap(30, 30, 30)
                        .addComponent(SiGet)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(borrarURL)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Post)
                                .addGap(32, 32, 32)
                                .addComponent(SiPost)
                                .addGap(127, 127, 127)))
                        .addGap(66, 66, 66)
                        .addComponent(borrarPalabra)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(agregarURL)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PalabraProhibida)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(EspacioPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(agregarPalabra)
                        .addGap(0, 55, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(agregarURL)
                        .addComponent(agregarPalabra)
                        .addComponent(EspacioURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(EspacioPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PalabraProhibida))
                    .addComponent(URLProhibida, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(borrarURL)
                            .addComponent(borrarPalabra))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SiGet)
                                .addComponent(Get, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(Post, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(SiPost))
                .addContainerGap())
        );
setResizable(false);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarURLActionPerformed
        if (!EspacioURL.getText().trim().isEmpty() && !dlm.contains(EspacioURL.getText())) {/*me aseguro de que no
             se agregue a la lista espacios vacios*/
            try {
                clienteAdm.mandar("addDUW " + EspacioURL.getText());
                clienteAdm.recibir();
                dlm.addElement(EspacioURL.getText());
            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
                aviso.mostrar();
            }
        } else {
            aviso = new Mensaje("no ha ingresado una palabra nueva");
            aviso.mostrar();
        }
    }//GEN-LAST:event_agregarURLActionPerformed

    private void borrarURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarURLActionPerformed
        if (ListaURL.isSelectionEmpty()) {
            aviso = new Mensaje("la lista est√° vacia o no ha seleccionado un elemento");
            aviso.mostrar();
            // me aseguro de no tratar de borrar algo de una lista vacia
        } else {
            try {
                clienteAdm.mandar("deleteDUW " + ListaURL.getSelectedIndex());
                dlm.remove(ListaURL.getSelectedIndex());
                clienteAdm.recibir();
            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
                aviso.mostrar();
            }
        }
    }//GEN-LAST:event_borrarURLActionPerformed

    private void agregarPalabraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPalabraActionPerformed
        if (!EspacioPalabra.getText().trim().isEmpty() && !dlm.contains(EspacioPalabra.getText())) {/*
             * idem de la opcion para URL
             */
            try {
                clienteAdm.mandar("addDW " + EspacioPalabra.getText());
                clienteAdm.recibir();
                dlm2.addElement(EspacioPalabra.getText());
            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
                aviso.mostrar();
            }
        } else {
            aviso = new Mensaje("no ha ingresado una palabra nueva");
            aviso.mostrar();
        }
    }//GEN-LAST:event_agregarPalabraActionPerformed

    private void borrarPalabraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarPalabraActionPerformed
        if (ListaPalabra.isSelectionEmpty()) {
            aviso = new Mensaje("la lista est√° vacia o no ha seleccionado un elemento");
            aviso.mostrar();
            //idem a la opcion para URL
        } else {
            try {
                clienteAdm.mandar("deleteDW " + ListaPalabra.getSelectedIndex());
                clienteAdm.recibir();
                dlm2.remove(ListaPalabra.getSelectedIndex());
            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
                aviso.mostrar();
            }
        }
    }//GEN-LAST:event_borrarPalabraActionPerformed

    private void EspacioURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EspacioURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EspacioURLActionPerformed

    private void EspacioPalabraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EspacioPalabraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EspacioPalabraActionPerformed

    private void SiPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiPostActionPerformed
        if (SiPost.isSelected()) {
            try {
                /*
                 * desactivar post
                 */
                clienteAdm.mandar("denyPOST");
                clienteAdm.recibir();

            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
                aviso.mostrar();
            }

        } else {
            try {
                /*
                 * activar post
                 */

                clienteAdm.mandar("allowPOST");
                clienteAdm.recibir();

            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
            }
        }
    }//GEN-LAST:event_SiPostActionPerformed

    private void SiGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiGetActionPerformed
        if (SiGet.isSelected()) {
            try {
                /*
                 * desactivar Get
                 */
                clienteAdm.mandar("denyGET");
                clienteAdm.recibir();

            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
            }
        } else {
            try {
                /*
                 * activar Get
                 */
                clienteAdm.mandar("allowGET");
                clienteAdm.recibir();

            } catch (IOException ex) {
                aviso = new Mensaje("El servidor se ha desconectado, reintente luego");
                aviso.mostrar();
                this.dispose();
            } catch (ClassNotFoundException ex) {
                aviso = new Mensaje(ex.getMessage());
            }
        }
    }//GEN-LAST:event_SiGetActionPerformed

    private void cerrar(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_cerrar
        try {
            clienteAdm.mandar((Object) "bye");
            clienteAdm.close();
        } catch (IOException ex) {
        }
        this.dispose();

    }//GEN-LAST:event_cerrar

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
        } catch (IllegalAccessException ex) {
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>
        /*
         * Create and display the form
         */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Administrador ventana = new Administrador();
                try {
                    ventana.conectarse();
                    ventana.setVisible(true);
                } catch (IOException ex) {
                    try {
                        ventana.conectarse();
                    } catch (IOException ex1) {
                        System.out.println("Servidor fuera de servicio, intente luego");
                        ventana.dispose();
                    }
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField EspacioPalabra;
    private javax.swing.JTextField EspacioURL;
    private javax.swing.JLabel Get;
    private javax.swing.JList ListaPalabra;
    private javax.swing.JList ListaURL;
    private javax.swing.JLabel Post;
    private javax.swing.JRadioButton SiGet;
    private javax.swing.JRadioButton SiPost;
    private javax.swing.JButton agregarPalabra;
    private javax.swing.JButton agregarURL;
    private javax.swing.JButton borrarPalabra;
    private javax.swing.JButton borrarURL;
    private javax.swing.JLabel PalabraProhibida;
    private javax.swing.JLabel URLProhibida;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;    
    private ClienteTCP clienteAdm;
    private Mensaje aviso;
    // End of variables declaration//GEN-END:variables
}
